---
const searchID = Math.random().toString(36).substring(2, 15);
const cd_s = Astro.cookies.get("cd_s").value;

interface Props {
  searchType: "cryptos" | "currencies";
}

const { searchType } = Astro.props;
const api_address = import.meta.env.PUBLIC_API_ADDRESS;
---

<script define:vars={{ searchID, cd_s, searchType, api_address }}>
  var items;
  var contentElement;
  var inputElement;
  var clearButton;
  var selectedItemId = null;

  const render = (filteredData) => {
    contentElement.innerHTML = "";
    filteredData.forEach((item, index) => {
      const li = document.createElement("li");
      li.classList.add(
        "flex",
        "items-center",
        "gap-4",
        "p-4",
        "cursor-pointer",
        "hover:bg-primary",
        "hover:bg-opacity-20",
        "transition-colors"
      );
      if (index === 0) {
        li.classList.add("border-t-2", "border-primary");
      }
      if (index !== filteredData.length - 1) {
        li.classList.add("border-b-2", "border-primary");
      }
      if (item.image) {
        const img = document.createElement("img");
        img.src = item.image;
        img.loading = "lazy";
        img.classList.add("w-10", "h-10", "rounded-full");
        li.appendChild(img);
      }
      const span = document.createElement("span");
      span.textContent = item.value;
      li.appendChild(span);
      contentElement.appendChild(li);

      li.addEventListener("click", () => {
        if (selectedItemId !== item.id) {
          selectedItemId = item.id;
          const selectedElement = document.getElementById(
            "selected-" + searchID
          );
          selectedElement.classList.remove("hidden");
          selectedElement.innerHTML = li.innerHTML;
        }

        const searchMenu = document.getElementById(`searchMenu-${searchID}`);
        searchMenu.style.display = "none";

        const event = new CustomEvent("search", {
          detail: {
            id: item.id,
            type: searchType,
            value: item.value,
          },
        });
        document.dispatchEvent(event);
      });

      contentElement.appendChild(li);
    });
  };

  const handleSearch = async () => {
    const searchTerm = inputElement.value.toLowerCase();
    const response = await fetch(
      `${api_address}/search/${searchType}/${searchTerm}`,
      {
        headers: {
          Session: cd_s,
        },
      }
    );

    const data = await response.json();

    if (data.status === "ok") {
      render(data.data);
      items = data.data;
    } else {
      render([]);
    }

    // Show/hide the clear button based on input value
    clearButton.style.display = searchTerm ? "block" : "none";
  };

  const handleClear = async () => {
    inputElement.value = "";
    clearButton.style.display = "none";
    await handleSearch();
    render(items);
  };

  document.addEventListener("DOMContentLoaded", async () => {
    contentElement = document.getElementById(`content-${searchID}`);
    inputElement = document.getElementById(`searchInput-${searchID}`);
    clearButton = document.getElementById(`clearButton-${searchID}`);
    await handleSearch();

    inputElement.addEventListener("input", handleSearch);
    clearButton.addEventListener("click", handleClear);

    render(items);
  });
</script>

<div
  class="hidden rounded-xl border-2 border-primary p-4 flex items-center font-bold gap-4"
  id=`selected-${searchID}`
>
</div>

<div
  class="rounded-xl border-2 border-primary text-white font-semibold"
  id=`searchMenu-${searchID}`
>
  <div class="relative">
    <input
      type="text"
      id=`searchInput-${searchID}`
      placeholder="Search..."
      class="bg-transparent w-full focus-within:outline-none p-4"
    />
    <button
      id=`clearButton-${searchID}`
      class="hidden absolute top-1/2 right-4 transform -translate-y-1/2 cursor-pointer w-10 h-10 bg-secondary rounded-full"
    >
      x
    </button>
  </div>
  <ul id=`content-${searchID}` class="max-h-[200px] overflow-y-scroll"></ul>
</div>

<style>
  ul::-webkit-scrollbar {
    width: 0.5em;
    padding-right: 0.5em;
    background: transparent;
  }
  ul::-webkit-scrollbar-thumb {
    background: #605ceb;
    border-radius: 9999999px;
  }
</style>
