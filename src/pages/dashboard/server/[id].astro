---
import DashboardLayout from "../../../layouts/dashboard.astro";
import TheChannelDeleteMenu from "../../../components/TheChannelDeleteMenu.astro";
import BaseButton from "../../../components/BaseButton.astro";
import SearchMenu from "../../../components/SearchMenu.astro";
import Arrow from "../../../../public/icons/long-arrow.svg?raw";
import ShortArrow from "../../../../public/icons/short-arrow.svg?raw";
import Trashcan from "../../../../public/icons/trashcan.svg?raw";
const cd_s = Astro.cookies.get("cd_s").value;
const { id } = Astro.params;

const api_address = import.meta.env.PUBLIC_API_ADDRESS;
---

<script define:vars={{ cd_s, id, Trashcan, api_address }}>
  let server = null;

  function loadGuildsFromLocalStorage() {
    for (const localStroageserver of JSON.parse(
      localStorage.getItem("guilds")
    )) {
      if (localStroageserver.id === id) {
        server = localStroageserver;
        break;
      }
    }
    if (!server) {
      return false;
    }
    const serverElement = document.getElementById("server");
    serverElement.innerHTML = `
      <img src="${
        server.icon ? server.icon : "/discord-logo.webp"
      }" class="w-8 h-8 object-contain ${
        server.icon ? "rounded-full" : null
      }" />
      <p>${server.name}</p>
    `;
    return true;
  }

  function fetchGuilds() {
    const response = fetch(`${api_address}/login`, {
      headers: {
        Session: cd_s,
      },
    }).then((res) => {
      res.json().then((data) => {
        if (data.status === "ok") {
          for (const server of data.guilds) {
            if (server.id === id) {
              const serverElement = document.getElementById("server");
              serverElement.innerHTML = `
      <img src="${
        server.icon ? server.icon : "/discord-logo.webp"
      }" class="w-8 h-8 object-contain ${
        server.icon ? "rounded-full" : null
      }" />
      <p>${server.name}</p>
    `;
            }
          }
        } else {
          window.location.href = "/";
        }
      });
    });
  }

  async function fetchChannels(count = null) {
    const channelElement = document.getElementById("channels");
    channelElement.innerHTML = `
    <div
        class="w-12 h-12 rounded-full animate-spin
      border-8 border-solid border-primary border-t-transparent"
      >
      </div>
    `;
    const response = await fetch(
      `${api_address}/guilds/${id}/channels?${count ? `count=${count}` : ""}`,
      {
        headers: {
          Session: cd_s,
        },
      }
    );

    const data = await response.json();

    if (data.status === "ok") {
      channelElement.innerHTML = "";
      for (const channel of data.channels) {
        channelElement.innerHTML += `
        <div class="flex items-center justify-between border-2 border-primary rounded-xl pl-4 font-semibold">
          <div>
            <p>${channel.name}</p>
          </div>
          <button class="delete-button p-4 hover:scale-[1.2] transition-transform" data-channel-id="${channel.id}">
            ${Trashcan}
          </button>
        </div>
      `;
      }

      if (data.gas_channel) {
        channelElement.innerHTML += `
        <div class="flex items-center justify-between border-2 border-primary rounded-xl pl-4 font-semibold">
          <div>
            <p>${data.gas_channel.name}</p>
          </div>
          <button class="delete-button p-4 hover:scale-[1.2] transition-transform" data-channel-id="${data.gas_channel.id}">
            ${Trashcan}
          </button>
        </div>
      `;
      }

      document.querySelectorAll(".delete-button").forEach((deleteButton) => {
        deleteButton.addEventListener("click", () => {
          const channelId = deleteButton.dataset.channelId;
          const channelDeleteMenu = document.querySelector(
            ".channel-delete-menu"
          );
          channelDeleteMenu.classList.remove("hidden");
          const event = new CustomEvent("open-delete-modal", {
            detail: {
              channel_id: channelId,
              guild_id: id,
            },
          });
          document.dispatchEvent(event);
        });
        return data.more;
      });
    } else {
      window.location.href = "/dashboard";
    }
  }

  document.addEventListener("DOMContentLoaded", async function (event) {
    if (!loadGuildsFromLocalStorage()) {
      fetchGuilds();
    }
    const showAllChannelsButton = document.getElementById("show-all-channels");

    const moreChannels = await fetchChannels(5);
    if (moreChannels) {
      showAllChannelsButton.classList.remove("hidden");
    }

    document.addEventListener("refresh-channels", () => {
      window.location.reload();
    });

    showAllChannelsButton.addEventListener("click", () => {
      fetchChannels();
      showAllChannelsButton.classList.add("hidden");
    });

    const typeMenu = document.getElementById("type-menu");
    const cryptoTypeButton = document.querySelector("#type-menu #crypto");
    const gasTypeButton = document.querySelector("#type-menu #gas");
    const cryptoMenu = document.getElementById("crypto-menu");
    const gasMenu = document.getElementById("gas-menu");

    const backToTypeSelectionButtons = document.querySelectorAll(
      "#back-to-type-selection"
    );

    cryptoTypeButton.addEventListener("click", () => {
      typeMenu.classList.add("hidden");
      cryptoMenu.classList.remove("hidden");
    });

    gasTypeButton.addEventListener("click", () => {
      typeMenu.classList.add("hidden");
      gasMenu.classList.remove("hidden");
    });

    backToTypeSelectionButtons.forEach((backToTypeSelectionButton) => {
      backToTypeSelectionButton.addEventListener("click", () => {
        cryptoMenu.classList.add("hidden");
        gasMenu.classList.add("hidden");
        typeMenu.classList.remove("hidden");
      });
    });

    var selectedCryptoAPIID;
    var selectedCurrencyName;

    document.addEventListener("search", (event) => {
      const { id, type, value } = event.detail;
      if (type === "cryptos") {
        selectedCryptoAPIID = id;
      } else if (type === "currencies") {
        selectedCurrencyName = value;
      }
    });

    var customizations = {};

    const addChannelButton = document.getElementById("add-channel-button");
    const errorElement = document.getElementById("error");
    addChannelButton.addEventListener("click", async () => {
      errorElement.innerHTML = "";
      if (!selectedCryptoAPIID || !selectedCurrencyName) {
        errorElement.innerHTML = `
          <p class="text-red-500">Please make sure you've selected a crypto and a currency.</p>
        `;
        return;
      }
      const response = await fetch(`${api_address}/guilds/${id}/channels`, {
        method: "POST",
        headers: {
          Session: cd_s,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          crypto_api_id: selectedCryptoAPIID,
          currency_name: selectedCurrencyName,
          customization: customizations,
        }),
      });
      const data = await response.json();
      if (data.status === "ok") {
        window.location.reload();
      } else {
        errorElement.innerHTML = `
          <p class="text-red-500">${data.data}</p>
        `;
      }
    });

    const toggleCustomizationDropdown = document.getElementById(
      "toggle-customization-dropdown"
    );
    const customizationDropdown = document.getElementById(
      "customization-dropdown"
    );
    toggleCustomizationDropdown.addEventListener("click", () => {
      customizationDropdown.classList.toggle("hidden");
      toggleCustomizationDropdown.querySelector("span").innerHTML =
        customizationDropdown.classList.contains("hidden")
          ? "Show customization options"
          : "Hide customization options";
    });

    customizationDropdown
      .querySelector("input")
      .addEventListener("input", (e) => {
        customizations.crypto_name = e.target.value;
      });

    const addGasChannelButton = document.getElementById(
      "add-gas-channel-button"
    );

    addGasChannelButton.addEventListener("click", async () => {
      const response = await fetch(`${api_address}/guilds/${id}/channels/gas`, {
        method: "POST",
        headers: {
          Session: cd_s,
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      if (data.status === "ok") {
        window.location.reload();
      } else {
        gasMenu.querySelector(".error").innerHTML = `
          <p class="text-red-500">${data.data}</p>
        `;
      }
    });
  });
</script>

<title>Dashboard - CryptoDisplay</title>
<meta
  name="description"
  content="Easily track crypto prices and gas fees in Discord with CryptoDisplay. Always stay up to date with real-time data in your home currency."
/>
<meta name="og:title" content="Dashboard - CryptoDisplay" />
<meta
  name="og:description"
  content="Easily track crypto prices and gas fees in Discord with CryptoDisplay. Always stay up to date with real-time data in your home currency."
/>
<meta name="og:image" content="https://cryptodisplay.net/logo-2.webp" />
<DashboardLayout>
  <div class="px-6 max-w-5xl mx-auto">
    <div
      class="flex items-center gap-4 opacity-60 hover:opacity-100 transition-opacity"
    >
      <div class="rotate-180">
        <Fragment set:html={Arrow} />
      </div>
      <a href="/dashboard">Back to servers</a>
    </div>
    <p class="opacity-60 mt-8 mb-2">Current server:</p>
    <div class="flex items-center gap-2 md:mb-12" id="server"></div>
    <div class="flex flex-col gap-4 md:flex-row md:gap-10">
      <div>
        <h2 class="font-bold text-3xl mt-10 md:mt-0">Active channels</h2>
        <p class="opacity-60 mb-4">
          View and delete your currently active channels on this server
        </p>
        <div id="channels" class="flex flex-col gap-4"></div>
        <button class="w-full mt-4 hidden" id="show-all-channels">
          <p class="text-center">Show all channels</p>
        </button>
        <div class="channel-delete-menu">
          <TheChannelDeleteMenu />
        </div>
      </div>
      <div class="basis-2/3">
        <h2 class="font-bold text-3xl mt-10 md:mt-0">Add channel</h2>
        <p class="opacity-60 mb-4">Here you can add a channel to the server</p>
        <div id="type-menu">
          <p class="font-semibold mb-4">Choose a channel type</p>
          <div class="flex items-center gap-4">
            <BaseButton text="Crypto" id="crypto" secondary fullWidth />
            <BaseButton text="GAS" id="gas" secondary fullWidth />
          </div>
        </div>
        <div class="hidden" id="crypto-menu">
          <div
            class="flex items-center gap-2 opacity-60 hover:opacity-100 transition-opacity mb-4 cursor-pointer"
            id="back-to-type-selection"
          >
            <div class="rotate-90">
              <Fragment set:html={ShortArrow} />
            </div>
            <span>Back to type selection</span>
          </div>
          <div>
            <p class="font-semibold mb-4">Crypto currency (e.g. BTC)</p>
            <SearchMenu searchType="cryptos" />
          </div>
          <div class="my-4 mb-8">
            <p class="font-semibold mb-4">Fiat currency (e.g. EUR)</p>
            <SearchMenu searchType="currencies" />
          </div>
          <button class="w-full mb-8" id="toggle-customization-dropdown">
            <span>Show customization options</span>
          </button>
          <div id="customization-dropdown" class="hidden mb-8">
            <h3 class="font-semibold text-lg">Crypto name</h3>
            <p class="opacity-60 mb-4">
              Change the name of the crypto, if e.g. it's too long
            </p>
            <input
              type="text"
              placeholder="Name"
              class="w-full border-2 border-primary rounded-xl p-4 bg-transparent focus-within:outline-none"
            />
          </div>
          <BaseButton text="Add channel" fullWidth id="add-channel-button" />
          <div id="error" class="mt-4"></div>
        </div>
        <div class="hidden" id="gas-menu">
          <div
            class="flex items-center gap-2 opacity-60 hover:opacity-100 transition-opacity mb-4 cursor-pointer"
            id="back-to-type-selection"
          >
            <div class="rotate-90">
              <Fragment set:html={ShortArrow} />
            </div>
            <span>Back to type selection</span>
          </div>
          <p>More options coming soon</p>
          <div class="w-full my-4">
            <BaseButton
              text="Add GAS channel"
              fullWidth
              id="add-gas-channel-button"
            />
          </div>

          <div class="error"></div>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>
